(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{160:function(a,t,e){"use strict";e.r(t);var r=e(0),s=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"常用的es6记录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用的es6记录","aria-hidden":"true"}},[a._v("#")]),a._v(" 常用的es6记录")]),a._v(" "),e("h2",{attrs:{id:"变量声明const和let"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#变量声明const和let","aria-hidden":"true"}},[a._v("#")]),a._v(" 变量声明const和let")]),a._v(" "),e("p",[a._v("let：块级元素,不允许在相同作用域内，重复声明同一个变量\nconst：对象所指向的地址不能改变，而变量成员是可以修改的")]),a._v(" "),e("h2",{attrs:{id:"解构赋值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解构赋值","aria-hidden":"true"}},[a._v("#")]),a._v(" 解构赋值")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('let [a, b, c] = [1, 2, 3];\nlet { foo, bar } = { foo: "aaa", bar: "bbb" };\n\n')])])]),e("h2",{attrs:{id:"spread-operator-展开运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spread-operator-展开运算符","aria-hidden":"true"}},[a._v("#")]),a._v(" Spread Operator 展开运算符")]),a._v(" "),e("p",[a._v("就是所谓的...\n复制数组和合并数组")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("const arr1= [1, 2];\n//复制数组\nconst arr2= [...arr1];(arr2改变不会影响arr1,深拷贝)\n//合并数组\n[...arr1,...arr2]\n")])])]),e("p",[a._v("有时候我们想获取数组或者对象除了前几项或者除了某几项的其他项")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("//对象也是类似下面这样\nlet number = [1,2,3,4,5]\nlet  [first, ...rest] = number//2,3,4,5\n")])])]),e("h2",{attrs:{id:"字符串扩展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符串扩展","aria-hidden":"true"}},[a._v("#")]),a._v(" 字符串扩展")]),a._v(" "),e("p",[a._v("模板字符串：将表达式嵌入字符串中进行拼接。用${}来界定")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var str = 'hello';\nvar result = `<div>${str} world</div>`;\n")])])]),e("p",[a._v("padStart：用于头部补全，相对的padEnd为尾部补全")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("'1'.padStart(2, '0');用于日期的补全工作\n")])])]),e("h2",{attrs:{id:"数值扩展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数值扩展","aria-hidden":"true"}},[a._v("#")]),a._v(" 数值扩展")]),a._v(" "),e("p",[a._v("用来判断一个数值是否为整数：Number.isInteger()\nMath函数的扩展 Math.trunc 去除小数部分")]),a._v(" "),e("h2",{attrs:{id:"数组扩展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组扩展","aria-hidden":"true"}},[a._v("#")]),a._v(" 数组扩展")]),a._v(" "),e("p",[a._v("Array.of()将一组值转换成数组\nMath.max(...[14, 3, 77]),取得最大值")]),a._v(" "),e("h2",{attrs:{id:"函数扩展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数扩展","aria-hidden":"true"}},[a._v("#")]),a._v(" 函数扩展")]),a._v(" "),e("p",[a._v("为函数的参数设置默认值")]),a._v(" "),e("h2",{attrs:{id:"对象扩展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对象扩展","aria-hidden":"true"}},[a._v("#")]),a._v(" 对象扩展")]),a._v(" "),e("p",[a._v("定义对象的函数可以省略冒号与 function 关键字\nObject.assign()：进行浅复制和同名属性的替换(源对象某个属性的值是对象,如果改变会反映到目标对象)\nObject.is()：比较两个值是否相等\nObject.values(),Object.keys()通过value或者key生成的数组")]),a._v(" "),e("h2",{attrs:{id:"箭头函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#箭头函数","aria-hidden":"true"}},[a._v("#")]),a._v(" 箭头函数")]),a._v(" "),e("p",[a._v("使用“箭头”（=>）定义函数\n函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象")]),a._v(" "),e("h2",{attrs:{id:"promise"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise","aria-hidden":"true"}},[a._v("#")]),a._v(" Promise")]),a._v(" "),e("ul",[e("li",[a._v("避免了层层嵌套的回调函数,用于定时器、ajax中")]),a._v(" "),e("li",[a._v("Promise对象是一个构造函数，用来生成Promise实例，Promise 新建后立即执行，Promise实例的状态变为resolved，就会触发then方法绑定的回调函数")]),a._v(" "),e("li",[a._v("接收的函数参数是同步执行的，但是then方法中的回调函数执行则是异步的")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("function result(value){\n\treturn new Promise(function(resolve,reject){\n\t\tif(value){\n\t\t\tresolve('你成功了');\n\t\t}else{\n\t\t\treject('你失败了');\n\t\t}\n\t});\n}\nresult(true).then(function(value){\n\tconsole.log(value);\n}).catch(function(value){\n\tconsole.log(value);\n});\nconsole.log('先输出');\n")])])]),e("h2",{attrs:{id:"async"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#async","aria-hidden":"true"}},[a._v("#")]),a._v(" async")]),a._v(" "),e("ul",[e("li",[a._v("async函数返回一个Promise对象，可以使用then方法添加回调函数")]),a._v(" "),e("li",[a._v("await表示紧跟在后面的表达式需要等待结果(异步操作),拿到结果才能进入下一步,await只能出现在async函数中")]),a._v(" "),e("li",[a._v("await命令后面是一个Promise对象。如果不是，会被转成一个立即resolve的 Promise对象")]),a._v(" "),e("li",[a._v("async函数内部return语句返回的值，会成为then方法回调函数的参数")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("function timer(){\n\treturn new Promise((resolve,reject)=>{\n\t\tsetTimeout(resolve,1500);\n\t});\n}\nasync function go(){\n\tawait timer().then(()=>{console.log('timer')});\n\tconsole.log('go');\n}\ngo();\n")])])]),e("h2",{attrs:{id:"import-和-export"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#import-和-export","aria-hidden":"true"}},[a._v("#")]),a._v(" import 和 export")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("//导入\nimport people from './example'\n// 导出默认, 有且只有一个默认\nexport default App\n\n//导入全部并且设置别名\nimport * as example from \"./example\"\n//n多个 export 导出很多模块\n\n//导入部分\nimport {name, age} from './example'\n//导出\nexport name;\nexport age;\n")])])]),e("h2",{attrs:{id:"symbol"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#symbol","aria-hidden":"true"}},[a._v("#")]),a._v(" Symbol")]),a._v(" "),e("p",[a._v("新的原始数据类型，防止属性名冲突，可以接受一个字符串作为参数，表示对 Symbol 实例的描述。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let set = Symbol('set');\nlet a = {};\na[set] = 'hello';\n")])])]),e("p",[a._v("注意：1、Symbol值作为对象属性名时，不能用点运算符。2、该属性不会出现在for...in、for...of循环中")])])}],!1,null,null,null);s.options.__file="README.md";t.default=s.exports}}]);